import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import mysql.connector


# ===============================
# Clase para gestionar la base de datos
# ===============================
class ArticulosDB:
    def __init__(self):
        self.conexion = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="bd2"
        )

    def alta(self, descripcion, precio):
        cursor = self.conexion.cursor()
        sql = "INSERT INTO articulos (descripcion, precio) VALUES (%s, %s)"
        cursor.execute(sql, (descripcion, precio))
        self.conexion.commit()
        cursor.close()

    def consulta(self, codigo):
        cursor = self.conexion.cursor()
        sql = "SELECT descripcion, precio FROM articulos WHERE codigo = %s"
        cursor.execute(sql, (codigo,))
        resultado = cursor.fetchone()
        cursor.close()
        return resultado

    def recuperar_todos(self):
        cursor = self.conexion.cursor()
        sql = "SELECT codigo, descripcion, precio FROM articulos"
        cursor.execute(sql)
        resultados = cursor.fetchall()
        cursor.close()
        return resultados


# ===============================
# Clase para la Interfaz Gráfica
# ===============================
class FormularioArticulos:
    def __init__(self):
        self.db = ArticulosDB()
        
        # Ventana principal
        self.ventana = tk.Tk()
        self.ventana.title("Gestión de Artículos")
        self.notebook = ttk.Notebook(self.ventana)

        # Pestañas del cuaderno
        self.cargar_articulo()
        self.consultar_articulo()
        self.listado_completo()
        
        self.notebook.pack(expand=1, fill='both')
        self.ventana.mainloop()

    # ==========================
    # Pestaña: Carga de Artículo
    # ==========================
    def cargar_articulo(self):
        self.pagina1 = ttk.Frame(self.notebook)
        self.notebook.add(self.pagina1, text="Cargar Artículo")

        # Campos de texto
        ttk.Label(self.pagina1, text="Descripción: ").grid(row=0, column=0, padx=10, pady=5)
        self.descripcion = tk.StringVar()
        ttk.Entry(self.pagina1, textvariable=self.descripcion).grid(row=0, column=1, padx=10, pady=5)

        ttk.Label(self.pagina1, text="Precio: ").grid(row=1, column=0, padx=10, pady=5)
        self.precio = tk.StringVar()
        ttk.Entry(self.pagina1, textvariable=self.precio).grid(row=1, column=1, padx=10, pady=5)

        # Botón de confirmación
        ttk.Button(self.pagina1, text="Guardar", command=self.agregar_articulo).grid(row=2, column=1, pady=10)

    def agregar_articulo(self):
        descripcion = self.descripcion.get()
        precio = self.precio.get()
        
        if descripcion and precio:
            try:
                precio = float(precio)
                self.db.alta(descripcion, precio)
                messagebox.showinfo("Éxito", "Artículo guardado correctamente")
                self.descripcion.set("")
                self.precio.set("")
            except ValueError:
                messagebox.showerror("Error", "El precio debe ser un número")
        else:
            messagebox.showerror("Error", "Todos los campos son obligatorios")

    # ==========================
    # Pestaña: Consultar Artículo
    # ==========================
    def consultar_articulo(self):
        self.pagina2 = ttk.Frame(self.notebook)
        self.notebook.add(self.pagina2, text="Consultar Artículo")

        # Campo para ingresar el código
        ttk.Label(self.pagina2, text="Código: ").grid(row=0, column=0, padx=10, pady=5)
        self.codigo = tk.StringVar()
        ttk.Entry(self.pagina2, textvariable=self.codigo).grid(row=0, column=1, padx=10, pady=5)

        # Botón para consultar
        ttk.Button(self.pagina2, text="Consultar", command=self.consultar).grid(row=1, column=1, pady=10)

        # Campos para mostrar la información
        ttk.Label(self.pagina2, text="Descripción: ").grid(row=2, column=0, padx=10, pady=5)
        self.descripcion_consulta = tk.StringVar()
        ttk.Entry(self.pagina2, textvariable=self.descripcion_consulta, state='readonly').grid(row=2, column=1)

        ttk.Label(self.pagina2, text="Precio: ").grid(row=3, column=0, padx=10, pady=5)
        self.precio_consulta = tk.StringVar()
        ttk.Entry(self.pagina2, textvariable=self.precio_consulta, state='readonly').grid(row=3, column=1)

    def consultar(self):
        codigo = self.codigo.get()
        if codigo.isdigit():
            resultado = self.db.consulta(codigo)
            if resultado:
                self.descripcion_consulta.set(resultado[0])
                self.precio_consulta.set(resultado[1])
            else:
                messagebox.showinfo("Información", "No se encontró el artículo.")
                self.descripcion_consulta.set("")
                self.precio_consulta.set("")
        else:
            messagebox.showerror("Error", "El código debe ser un número entero")

    # ==========================
    # Pestaña: Listado Completo
    # ==========================
    def listado_completo(self):
        self.pagina3 = ttk.Frame(self.notebook)
        self.notebook.add(self.pagina3, text="Listado Completo")

        # Scroll para el listado
        self.scrolledtext = scrolledtext.ScrolledText(self.pagina3, width=50, height=15)
        self.scrolledtext.grid(row=0, column=0, padx=10, pady=10)

        # Botón para cargar el listado
        ttk.Button(self.pagina3, text="Cargar Listado", command=self.mostrar_todos).grid(row=1, column=0, pady=10)

    def mostrar_todos(self):
        articulos = self.db.recuperar_todos()
        self.scrolledtext.delete(1.0, tk.END)
        for art in articulos:
            self.scrolledtext.insert(tk.END, f"Código: {art[0]} | Descripción: {art[1]} | Precio: {art[2]}\n")


# Ejecutar la aplicación
if __name__ == "__main__":
    FormularioArticulos()
